version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: bitnami/postgresql:15
    container_name: flame_ai_postgres
    environment:
      POSTGRESQL_USERNAME: flame_ai_user
      POSTGRESQL_PASSWORD: flame_ai_pass
      POSTGRESQL_DATABASE: flame_ai
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - flame_ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flame_ai_user -d flame_ai"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: flame_ai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - flame_ai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: flame_ai_backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://flame_ai_user:flame_ai_pass@postgres:5432/flame_ai?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: asdfghjkl1234567890
      FRONTEND_URL: http://localhost:3000
      BACKEND_URL: http://localhost:8080
      PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - flame_ai_network
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./backend/src:/app/src
      - ./backend/sessions:/app/sessions
    entrypoint: [] # Anular el entrypoint anterior
    restart: unless-stopped

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: flame_ai_frontend
    environment:
      VITE_API_URL: http://localhost:8080/api
      VITE_BACKEND_URL: http://localhost:8080
      VITE_APP_NAME: Flame AI CRM
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - flame_ai_network

  # Nginx Reverse Proxy (Opcional)
  nginx:
    image: nginx:alpine
    container_name: flame_ai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - flame_ai_network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  flame_ai_network:
    driver: bridge 