generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String
  email            String            @unique
  password         String
  profile          String            @default("user")
  avatar           String?
  isActive         Boolean           @default(true)
  isOnline         Boolean           @default(false)
  lastSeen         DateTime          @default(now())
  companyId        String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  roleId           String?
  agentStatus      String            @default("available")
  autoAwayEnabled  Boolean           @default(true)
  autoAwayTimeout  Int               @default(15)
  statusMessage    String?
  statusUpdatedAt  DateTime          @default(now())
  campaigns        Campaign[]
  conversations    Conversation[]
  messageTemplates MessageTemplate[]
  messages         Message[]
  schedules        Schedule[]
  tickets          Ticket[]
  activityLogs     UserActivityLog[]
  sentInvitations  UserInvitation[]  @relation("InvitedBy")
  userSettings     UserSettings?
  notificationPreferences UserNotificationPreferences?
  pushSubscriptions PushSubscription[]
  notifications    Notification[]
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role             Role?             @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Role {
  id           String           @id @default(cuid())
  name         String           @unique
  displayName  String
  description  String?
  color        String?
  isSystemRole Boolean          @default(false)
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  permissions  RolePermission[]
  invitations  UserInvitation[]
  users        User[]

  @@map("roles")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  module      String
  action      String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  module    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activity_logs")
}

model UserInvitation {
  id          String    @id @default(cuid())
  email       String
  roleId      String?
  invitedById String
  companyId   String
  status      String    @default("pending")
  token       String    @unique
  message     String?
  expiresAt   DateTime
  acceptedAt  DateTime?
  rejectedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invitedBy   User      @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)
  role        Role?     @relation(fields: [roleId], references: [id])

  @@map("user_invitations")
}

model Company {
  id               String            @id @default(cuid())
  name             String
  plan             String            @default("free")
  status           String            @default("active")
  dueDate          DateTime?
  recurrence       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  address          String?
  city             String?
  companySize      String?
  country          String?
  description      String?
  email            String?
  industry         String?
  logo             String?
  notes            String?
  phone            String?
  postalCode       String?
  state            String?
  vatNumber        String?
  website          String?
  botFlows         BotFlow[]
  campaigns        Campaign[]
  settings         CompanySettings?
  connections      Connection[]
  contacts         Contact[]
  legacyTags       LegacyTag[]
  mediaFiles       MediaFile[]
  messageTemplates MessageTemplate[]
  organizations    Organization[]
  queues           Queue[]
  tags             Tag[]
  userInvitations  UserInvitation[]
  users            User[]
  notifications    Notification[]

  @@map("companies")
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phone       String?
  website     String?
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  industry    String?
  companySize String?
  vatNumber   String?
  description String?
  notes       String?
  logo        String?
  status      String    @default("active")
  companyId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contacts    Contact[] @relation("OrganizationContacts")
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([name, companyId])
  @@map("organizations")
}

model Connection {
  id                   String                @id @default(cuid())
  name                 String
  type                 String
  status               String                @default("DISCONNECTED")
  session              String?               @unique
  qrcode               String?
  accessToken          String?
  retries              Int                   @default(0)
  isDefault            Boolean               @default(false)
  isActive             Boolean               @default(true)
  webhookByEvents      Boolean               @default(false)
  webhookUrl           String?
  settings             Json?
  companyId            String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  autoMessageSchedules AutoMessageSchedule[]
  botFlows             BotFlow[]
  botInteractions      BotInteraction[]
  company              Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  conversations        Conversation[]
  messages             Message[]
  tickets              Ticket[]

  @@map("connections")
}

model Contact {
  id               String            @id @default(cuid())
  name             String
  number           String
  email            String?
  avatar           String?
  isGroup          Boolean           @default(false)
  isBlocked        Boolean           @default(false)
  companyName      String?
  position         String?
  address          String?
  notes            String?
  companyId        String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  birthday         DateTime?
  city             String?
  country          String?
  customerType     String?
  postalCode       String?
  socials          Json?
  state            String?
  status           String?
  organizationId   String?
  campaignContacts CampaignContact[]
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  organization     Organization?     @relation("OrganizationContacts", fields: [organizationId], references: [id])
  conversations    Conversation[]
  messages         Message[]
  schedules        Schedule[]
  tickets          Ticket[]
  tags             Tag[]             @relation("ContactTags")

  @@unique([number, companyId])
  @@map("contacts")
}

model Ticket {
  id             String     @id @default(cuid())
  status         String     @default("open")
  priority       String     @default("medium")
  category       String?
  subject        String?
  lastMessage    String?
  unreadMessages Int        @default(0)
  kanbanColumn   String?
  kanbanOrder    Int        @default(0)
  contactId      String
  connectionId   String
  userId         String?
  queueId        String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  messages       Message[]
  connection     Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  contact        Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  queue          Queue?     @relation(fields: [queueId], references: [id])
  user           User?      @relation(fields: [userId], references: [id])
  tags           Tag[]      @relation("TicketTags")

  @@map("tickets")
}

model Conversation {
  id            String     @id @default(cuid())
  unreadCount   Int        @default(0)
  contactId     String
  connectionId  String
  userId        String?
  lastMessageId String?
  archived      Boolean    @default(false)
  archivedAt    DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  connection    Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  contact       Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  lastMessage   Message?   @relation("LastMessage", fields: [lastMessageId], references: [id])
  user          User?      @relation(fields: [userId], references: [id])
  messages      Message[]

  @@unique([contactId, connectionId])
  @@map("conversations")
}

model Message {
  id                       String           @id @default(cuid())
  fromMe                   Boolean          @default(false)
  mediaType                String?
  mediaUrl                 String?
  quotedMsg                String?
  ticketId                 String?
  contactId                String
  connectionId             String
  userId                   String?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  content                  String
  conversationId           String
  status                   String           @default("sent")
  timestamp                DateTime         @default(now())
  reaction                 String?
  deliveredAt              DateTime?
  failedAt                 DateTime?
  fileMimeType             String?
  fileName                 String?
  fileSize                 Int?
  locationAddress          String?
  locationLatitude         Float?
  locationLongitude        Float?
  metadata                 Json?
  readAt                   DateTime?
  sentAt                   DateTime?
  botInteractions          BotInteraction[]
  lastMessageConversations Conversation[]   @relation("LastMessage")
  connection               Connection       @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  contact                  Contact          @relation(fields: [contactId], references: [id], onDelete: Cascade)
  conversation             Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  ticket                   Ticket?          @relation(fields: [ticketId], references: [id])
  user                     User?            @relation(fields: [userId], references: [id])

  @@map("messages")
}

model Queue {
  id                String   @id @default(cuid())
  name              String
  color             String   @default("#000000")
  greetingMessage   String?
  outOfHoursMessage String?
  companyId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  company           Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tickets           Ticket[]

  @@map("queues")
}

model LegacyTag {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#000000")
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([name, companyId])
  @@map("legacy_tags")
}

model Tag {
  id        String    @id @default(cuid())
  color     String    @default("#007BFF")
  companyId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  attribute String
  value     String
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contacts  Contact[] @relation("ContactTags")
  tickets   Ticket[]  @relation("TicketTags")

  @@unique([attribute, value, companyId])
  @@map("tags")
}

model Campaign {
  id          String            @id @default(cuid())
  name        String
  status      String            @default("draft")
  message     String
  scheduledAt DateTime?
  sentCount   Int               @default(0)
  errorCount  Int               @default(0)
  companyId   String
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  contacts    CampaignContact[]
  company     Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("campaigns")
}

model CampaignContact {
  campaignId String
  contactId  String
  status     String    @default("pending")
  sentAt     DateTime?
  errorMsg   String?
  campaign   Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact    Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@id([campaignId, contactId])
  @@map("campaign_contacts")
}

model Schedule {
  id        String    @id @default(cuid())
  body      String
  sendAt    DateTime
  sentAt    DateTime?
  status    String    @default("pending")
  contactId String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contact   Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model AutoMessageSchedule {
  id           String     @id @default(cuid())
  connectionId String
  message      String
  timeRanges   Json
  daysOfWeek   Json
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  @@map("auto_message_schedules")
}

model BotFlow {
  id            String           @id @default(cuid())
  name          String
  description   String?
  isActive      Boolean          @default(true)
  priority      Int              @default(0)
  alwaysRespond Boolean          @default(false)
  stopOnMatch   Boolean          @default(true)
  connectionId  String
  companyId     String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  conditions    BotCondition[]
  company       Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  connection    Connection       @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  interactions  BotInteraction[]

  @@map("bot_flows")
}

model BotCondition {
  id            String           @id @default(cuid())
  name          String
  type          String
  value         String
  operator      String           @default("equals")
  caseSensitive Boolean          @default(false)
  regexFlags    String?
  flowId        String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  flow          BotFlow          @relation(fields: [flowId], references: [id], onDelete: Cascade)
  interactions  BotInteraction[]
  responses     BotResponse[]

  @@map("bot_conditions")
}

model BotResponse {
  id           String       @id @default(cuid())
  message      String
  responseType String       @default("text")
  mediaUrl     String?
  mediaCaption String?
  delay        Int          @default(0)
  order        Int          @default(0)
  conditionId  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  condition    BotCondition @relation(fields: [conditionId], references: [id], onDelete: Cascade)

  @@map("bot_responses")
}

model BotInteraction {
  id            String        @id @default(cuid())
  messageId     String
  connectionId  String
  flowId        String?
  conditionId   String?
  matched       Boolean       @default(false)
  responsesSent Int           @default(0)
  createdAt     DateTime      @default(now())
  condition     BotCondition? @relation(fields: [conditionId], references: [id])
  connection    Connection    @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  flow          BotFlow?      @relation(fields: [flowId], references: [id])
  message       Message       @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("bot_interactions")
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  soundNotifications Boolean  @default(true)
  theme              String   @default("light")
  language           String   @default("es")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model CompanySettings {
  id                   String   @id @default(cuid())
  companyId            String   @unique
  transferTicket       Boolean  @default(true)
  closeTicket          Boolean  @default(true)
  useNPS               Boolean  @default(false)
  sendGreetingAccepted Boolean  @default(true)
  sendGreetingRefused  Boolean  @default(true)
  workingHours         String?
  outOfHoursMessage    String?
  chatbotEnabled       Boolean  @default(false)
  chatbotMessage       String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  company              Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_settings")
}

model MediaFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimetype     String
  size         Int
  path         String
  url          String
  thumbnail    String?
  duration     Int?
  dimensions   String?
  companyId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("media_files")
}

model MessageTemplate {
  id          String   @id @default(cuid())
  name        String
  content     String
  category    String?
  shortcut    String?
  isActive    Boolean  @default(true)
  isShared    Boolean  @default(false)
  usageCount  Int      @default(0)
  companyId   String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@unique([companyId, shortcut])
  @@map("message_templates")
}

model UserNotificationPreferences {
  id                  String   @id @default(cuid())
  userId              String   @unique
  channels            Json     @default("{\"websocket\": true, \"push\": true, \"email\": false, \"sms\": false, \"desktop\": true}")
  types               Json     @default("{\"message\": true, \"ticket\": true, \"assignment\": true, \"system\": true, \"warning\": true, \"success\": true, \"error\": true}")
  priority            Json     @default("{\"low\": true, \"medium\": true, \"high\": true, \"urgent\": true}")
  quietHours          Json     @default("{\"enabled\": false, \"start\": \"22:00\", \"end\": \"08:00\"}")
  soundEnabled        Boolean  @default(true)
  vibrationEnabled    Boolean  @default(true)
  groupNotifications  Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_preferences")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  keys      Json
  userAgent String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}

model Notification {
  id         String   @id @default(cuid())
  type       String
  title      String
  message    String
  userId     String
  companyId  String
  entityId   String?
  entityType String?
  priority   String   @default("medium")
  actionUrl  String?
  data       Json?
  channels   Json     @default("[\"websocket\"]")
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
